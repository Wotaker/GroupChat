# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import group_chat_pb2 as group__chat__pb2


class MessengerStub(object):
    """Interface exported by the Messenger server, which handles the subscription mechanism
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Init = channel.unary_unary(
                '/Messenger/Init',
                request_serializer=group__chat__pb2.ClientInfo.SerializeToString,
                response_deserializer=group__chat__pb2.InitStatus.FromString,
                )
        self.JoinGroup = channel.unary_unary(
                '/Messenger/JoinGroup',
                request_serializer=group__chat__pb2.JoinInfo.SerializeToString,
                response_deserializer=group__chat__pb2.Status.FromString,
                )
        self.Listen = channel.stream_stream(
                '/Messenger/Listen',
                request_serializer=group__chat__pb2.ListenStatus.SerializeToString,
                response_deserializer=group__chat__pb2.Message.FromString,
                )
        self.SendMsg = channel.unary_unary(
                '/Messenger/SendMsg',
                request_serializer=group__chat__pb2.Message.SerializeToString,
                response_deserializer=group__chat__pb2.Status.FromString,
                )


class MessengerServicer(object):
    """Interface exported by the Messenger server, which handles the subscription mechanism
    """

    def Init(self, request, context):
        """Saves a new client to be served. If the clients already exists, do nothing

        Returns Ok Status if succeded
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinGroup(self, request, context):
        """Assigns a client to the new group. If the group does not exist, creates a new one.

        Returns Ok Status if Succeded
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Listen(self, request_iterator, context):
        """A bidirectional stream. Client informs the server that he/she is still listening,
        the server responds with a stream of messages addressed to client (subscribtion group)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMsg(self, request, context):
        """Sends a message to the specific group. If the group does not exists, server informs
        by appropriate status code, otherwise returns Ok Status.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessengerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Init': grpc.unary_unary_rpc_method_handler(
                    servicer.Init,
                    request_deserializer=group__chat__pb2.ClientInfo.FromString,
                    response_serializer=group__chat__pb2.InitStatus.SerializeToString,
            ),
            'JoinGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinGroup,
                    request_deserializer=group__chat__pb2.JoinInfo.FromString,
                    response_serializer=group__chat__pb2.Status.SerializeToString,
            ),
            'Listen': grpc.stream_stream_rpc_method_handler(
                    servicer.Listen,
                    request_deserializer=group__chat__pb2.ListenStatus.FromString,
                    response_serializer=group__chat__pb2.Message.SerializeToString,
            ),
            'SendMsg': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMsg,
                    request_deserializer=group__chat__pb2.Message.FromString,
                    response_serializer=group__chat__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Messenger', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Messenger(object):
    """Interface exported by the Messenger server, which handles the subscription mechanism
    """

    @staticmethod
    def Init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messenger/Init',
            group__chat__pb2.ClientInfo.SerializeToString,
            group__chat__pb2.InitStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JoinGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messenger/JoinGroup',
            group__chat__pb2.JoinInfo.SerializeToString,
            group__chat__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Listen(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Messenger/Listen',
            group__chat__pb2.ListenStatus.SerializeToString,
            group__chat__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMsg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messenger/SendMsg',
            group__chat__pb2.Message.SerializeToString,
            group__chat__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
