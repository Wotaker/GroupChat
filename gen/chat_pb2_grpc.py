# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chat_pb2 as chat__pb2


class MessengerStub(object):
    """Interface exported by the Messenger server, which handles the subscription mechanism
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Init = channel.unary_unary(
                '/Messenger/Init',
                request_serializer=chat__pb2.ClientInfo.SerializeToString,
                response_deserializer=chat__pb2.InitStatus.FromString,
                )
        self.JoinGroup = channel.unary_unary(
                '/Messenger/JoinGroup',
                request_serializer=chat__pb2.JoinInfo.SerializeToString,
                response_deserializer=chat__pb2.Status.FromString,
                )
        self.SendTo = channel.unary_unary(
                '/Messenger/SendTo',
                request_serializer=chat__pb2.Message.SerializeToString,
                response_deserializer=chat__pb2.Status.FromString,
                )
        self.StreamSendTo = channel.stream_unary(
                '/Messenger/StreamSendTo',
                request_serializer=chat__pb2.Message.SerializeToString,
                response_deserializer=chat__pb2.Status.FromString,
                )


class MessengerServicer(object):
    """Interface exported by the Messenger server, which handles the subscription mechanism
    """

    def Init(self, request, context):
        """Saves a new client to be served. If the clients already exists, do nothing

        Returns Ok Status if succeded
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinGroup(self, request, context):
        """Assigns a client to the new group. If the group does not exist, creates a new one.

        Returns Ok Status if Succeded
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendTo(self, request, context):
        """Sends a message to the specific group. If the group does not exists, informs
        by appropriate status code, otherwise returns Ok Status.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamSendTo(self, request_iterator, context):
        """Sends a stream of messages to the specific group. If the group does not exists, informs
        by appropriate status code, otherwise returns Ok Status.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessengerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Init': grpc.unary_unary_rpc_method_handler(
                    servicer.Init,
                    request_deserializer=chat__pb2.ClientInfo.FromString,
                    response_serializer=chat__pb2.InitStatus.SerializeToString,
            ),
            'JoinGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinGroup,
                    request_deserializer=chat__pb2.JoinInfo.FromString,
                    response_serializer=chat__pb2.Status.SerializeToString,
            ),
            'SendTo': grpc.unary_unary_rpc_method_handler(
                    servicer.SendTo,
                    request_deserializer=chat__pb2.Message.FromString,
                    response_serializer=chat__pb2.Status.SerializeToString,
            ),
            'StreamSendTo': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamSendTo,
                    request_deserializer=chat__pb2.Message.FromString,
                    response_serializer=chat__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Messenger', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Messenger(object):
    """Interface exported by the Messenger server, which handles the subscription mechanism
    """

    @staticmethod
    def Init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messenger/Init',
            chat__pb2.ClientInfo.SerializeToString,
            chat__pb2.InitStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JoinGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messenger/JoinGroup',
            chat__pb2.JoinInfo.SerializeToString,
            chat__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendTo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messenger/SendTo',
            chat__pb2.Message.SerializeToString,
            chat__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamSendTo(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Messenger/StreamSendTo',
            chat__pb2.Message.SerializeToString,
            chat__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ReciverStub(object):
    """Interface exported by the Reciver - a server on the client side that handles notifications
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Notify = channel.unary_unary(
                '/Reciver/Notify',
                request_serializer=chat__pb2.Message.SerializeToString,
                response_deserializer=chat__pb2.Status.FromString,
                )
        self.StreamNotify = channel.stream_unary(
                '/Reciver/StreamNotify',
                request_serializer=chat__pb2.Message.SerializeToString,
                response_deserializer=chat__pb2.Status.FromString,
                )


class ReciverServicer(object):
    """Interface exported by the Reciver - a server on the client side that handles notifications
    """

    def Notify(self, request, context):
        """Transfers a new message to the reciver.

        Returns Ok status if the reception was succesfull
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamNotify(self, request_iterator, context):
        """Transfers stream of messages to the reciver.

        Returns Ok status if the reception was succesfull
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReciverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Notify': grpc.unary_unary_rpc_method_handler(
                    servicer.Notify,
                    request_deserializer=chat__pb2.Message.FromString,
                    response_serializer=chat__pb2.Status.SerializeToString,
            ),
            'StreamNotify': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamNotify,
                    request_deserializer=chat__pb2.Message.FromString,
                    response_serializer=chat__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Reciver', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Reciver(object):
    """Interface exported by the Reciver - a server on the client side that handles notifications
    """

    @staticmethod
    def Notify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reciver/Notify',
            chat__pb2.Message.SerializeToString,
            chat__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamNotify(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Reciver/StreamNotify',
            chat__pb2.Message.SerializeToString,
            chat__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
