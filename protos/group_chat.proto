syntax = "proto3";

// Interface exported by the Messenger server, which handles the subscription mechanism
service Messenger {

    // Saves a new client to be served. If the clients already exists, do nothing
    //
    // Returns Ok Status if succeded
    rpc Init (ClientInfo) returns (InitStatus) {}

    // Assigns a client to the new group. If the group does not exist, creates a new one.
    //
    // Returns Ok Status if Succeded
    rpc JoinGroup (JoinInfo) returns (Status) {}

    // A bidirectional stream. Client informs the server that he/she is still listening,
    // the server responds with a stream of messages addressed to client (subscribtion group)
    rpc Listen (stream ListenStatus) returns (stream Message) {}

    // Sends a message to the specific group. If the group does not exists, server informs
    // by appropriate status code, otherwise returns Ok Status.
    rpc SendMsg (Message) returns (Status) {}
}

message MIME {
    string type = 1;
    string subtype = 2;
    bytes data = 3;
}

message Message {
    uint64 sender_id = 1;
    string sender_nickname = 2;
    uint64 group_id = 3;
    uint32 priority = 4;
    string text = 5;
    MIME mime = 6;
    string citation = 7;
}

message JoinInfo {
    uint64 client_id = 1;
    uint64 group_id = 2;
}

message ClientInfo {
    string nickname = 1;
}

message Status {
    uint32 code = 1;
    string details = 2;
}

message InitStatus {
    uint32 code = 1;
    uint64 new_id = 2;
    uint64 new_group_id = 3;
    string details = 4;
}

message ListenStatus {
    bool confirm = 1;
    uint64 client_id = 2;
}
